// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuário
model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String
  password      String
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  addresses     Address[]
  orders        Order[]
  cart          Cart?
}

// Modelo de Endereço
model Address {
  id           String    @id @default(uuid())
  street       String
  number       String
  complement   String?
  district     String
  city         String
  state        String
  zipCode      String
  userId       String
  user         User      @relation(fields: [userId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

// Modelo de Produto
model Product {
  id          String        @id @default(uuid())
  name        String
  description String
  price       Decimal
  images      String[]
  category    Category      @relation(fields: [categoryId], references: [id])
  categoryId  String
  features    String[]
  material    String
  sizes       String[]
  colors      String[]
  discount    Float?
  isNew       Boolean       @default(false)
  tags        String[]
  stock       Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

// Modelo de Categoria
model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  image       String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Modelo de Carrinho
model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Modelo de Item do Carrinho
model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  size      String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo de Pedido
model Order {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
  status        OrderStatus @default(PENDING)
  total         Decimal
  paymentMethod String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

// Modelo de Item do Pedido
model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal
  size      String
  color     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enum para Status do Pedido
enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
} 